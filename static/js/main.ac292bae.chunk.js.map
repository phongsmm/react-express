{"version":3,"sources":["logo.svg","Calldata.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calldata","props","Input1_Change","event","setState","input_1","target","value","Input1_Submit","a","newData","id","count","state","items","length","name","atb","fetch","method","headers","body","JSON","stringify","json","window","location","reload","isLoaded","response","data","this","console","table","len","log","map","item","className","key","type","placeholder","onChange","onClick","React","Component","App","src","logo","alt","href","rel","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,kQC+E5BC,G,wDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2BRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACC,QAAQF,EAAMG,OAAOC,SA7BnB,EA+BjBC,cA/BiB,sBA+BD,4BAAAC,EAAA,6DAEbC,EAAU,CACXC,GAAG,GAAD,OAAK,EAAKC,MAAM,EAAKC,MAAMC,MAAMC,OAAO,IAC1CC,KAAO,EAAKH,MAAMR,QAClBY,IAAM,OALQ,SASCC,MAAM,6CACvB,CAACC,OAAO,OAAOC,QAAQ,CAAC,eAAe,oBACvCC,KAAKC,KAAKC,UAAUb,KAXJ,cAahBc,OACFC,OAAOC,SAASC,QAAO,GAdL,2CA7BhB,EAAKd,MAAQ,CACXR,QAAQ,GACRS,MAAM,GACNc,UAAS,GALM,E,wLAWJ,0C,SACUV,MADV,2C,cACPW,E,gBACaA,EAASL,O,cAAtBM,E,gBACAC,KAAK3B,SAAS,CAACwB,UAAS,EAAKd,MAAMgB,I,wBACnCE,QAAQC,MAAMH,G,mIAKfI,GACL,OAAGA,EAAI,GACC,IAAN,OAAWA,GAENA,I,+BA2BC,IAAD,EACgBH,KAAKlB,MAAvBe,EADE,EACFA,SAASd,EADP,EACOA,MAEhB,OADKc,GAAUI,QAAQG,IAAI,eAEzB,6BACE,wCACF,4BACCrB,EAAMsB,KAAI,SAAAC,GAAI,OAAE,wBAAIC,UAAWD,EAAKpB,IAAKsB,IAAKF,EAAK1B,IAAK0B,EAAKrB,UAG9D,yBAAKsB,UAAU,mBACb,2BAAOE,KAAK,OAAOC,YAAY,OAAOC,SAAUX,KAAK7B,gBACvD,4BAAQoC,UAAU,YAAYK,QAASZ,KAAKvB,eAA5C,c,GAjEmBoC,IAAMC,YCwBdC,MAvBf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKS,IAAKC,IAAMV,UAAU,WAAWW,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEX,UAAU,WACVY,KAAK,sBACL5C,OAAO,SACP6C,IAAI,uBAJN,eAQA,kBAAC,EAAD,SCVYC,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.ac292bae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Calldata.css'\r\n\r\n\r\n\r\nclass Calldata extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input_1:'',\r\n      items:[],\r\n      isLoaded:false,\r\n     \r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const link = \"https://express-serve.herokuapp.com/api\";\r\n    const response = await fetch(link);\r\n    const data = await response.json();\r\n    await this.setState({isLoaded:true,items:data});\r\n    await console.table(data)\r\n\r\n\r\n  }\r\n\r\n   count(len){\r\n    if(len<10){\r\n      return `0${len}`\r\n    }\r\n    return len;\r\n  }\r\n\r\n  \r\n  Input1_Change = (event)=>{\r\n    this.setState({input_1:event.target.value});\r\n  }\r\n    Input1_Submit = async ()=>{\r\n\r\n   let newData = {\r\n      id: `${this.count(this.state.items.length+1)}`,\r\n      name : this.state.input_1,\r\n      atb : 'OFF'\r\n\r\n    };\r\n\r\n    const r =  await fetch(\"https://express-serve.herokuapp.com/create\",\r\n    {method:'POST',headers:{'Content-type':'application/json'},\r\n    body:JSON.stringify(newData)\r\n  });\r\n  r.json()\r\n  window.location.reload(false);\r\n \r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    var {isLoaded,items} = this.state\r\n    if(isLoaded){console.log('Data Loaded');}\r\n  return (\r\n    <div>\r\n      <h1>Welcome </h1>\r\n    <h3>\r\n    {items.map(item=><li className={item.atb} key={item.id}>{item.name}</li>)}\r\n    </h3>\r\n    \r\n    <div className=\"ui action input\">\r\n      <input type=\"text\" placeholder=\"name\" onChange={this.Input1_Change}/>\r\n    <button className=\"ui button\" onClick={this.Input1_Submit}>POST</button>\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n  }\r\n\r\n}\r\n\r\nexport default Calldata;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport Calldata from './Calldata';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <Calldata/>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}